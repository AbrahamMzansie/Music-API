worker_processes  auto;
pid        /var/run/nginx.pid;
worker_rlimit_nofile 8192;
# daemon off;

events {
	worker_connections  8000;
	multi_accept        on;  
    use                 epoll; 
    epoll_events        512; 
}

http {

	server_tokens off;

	# Speed up file transfers by using sendfile() to copy directly
	# between descriptors rather than using read()/write().
	sendfile        off;

	# Tell Nginx not to send out partial frames; this increases throughput
	# since TCP frames are filled up before being sent out. (adds TCP_CORK)
	tcp_nopush      on;

	# Tell Nginx to enable the Nagle buffering algorithm for TCP packets, which
	# collates several smaller packets together into one larger packet, thus saving
	# bandwidth at the cost of a nearly imperceptible increase to latency. (removes TCP_NODELAY)
	tcp_nodelay     off;

	include    /etc/nginx/mime.types;
	include				/etc/nginx/proxy.conf;	
	default_type  application/octet-stream;

	# Update charset_types due to updated mime.types
  	charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;

	# Format to use in log files
	log_format compression '$remote_addr - $remote_user [$time_local] '
		'"$request" $status $upstream_addr '
		'"$http_referer" "$http_user_agent" "$gzip_ratio"';

	keepalive_timeout  30s; 
	keepalive_requests 30;
	send_timeout      30s;

	# Limiting users requests 
	# You can make use of the limit_req_zone and limit_req directives to limit the rate of a request sent by users in minutes.
	limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;

	upstream app_upstream {
		server localhost:40001;
		keepalive 64;
	}

	server {
		listen 4001
		server_name  example.yootok.com;

		client_max_body_size 2m; 
		client_body_in_single_buffer on;
		client_header_buffer_size  1m; 
		large_client_header_buffers 4 8k;

		include    /etc/nginx/basic.conf;

		location / {
			# Reject requests with unsupported HTTP method
			if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
				return 405;
			}
			
			proxy_pass         http://app_upstream;
		}

        access_log /var/log/nginx/access.log compression;

	}

	# Compression
  	include       /etc/nginx/gzip.conf;

}