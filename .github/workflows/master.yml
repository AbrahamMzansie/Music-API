name: Deploy to Production
env:
    PORT: 4001
    NODE_ENV: production
    REPOSITORY: yootok-example
    CLUSTER: yootok-example
    CONTAINER: yootok-example-container
    SERVICE: yootok-example-service
    SERVICE_STABILITY: false

on:
    release:
        types: [created]
    push:
        branches: [main]

jobs:
    deploy:
        name: Deploy to Production Server
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Environment Variables Setup
              run: |
                  cp .env.example .env

                  npm run env PORT ${{ env.PORT }}
                  npm run env NODE_ENV ${{ env.NODE_ENV }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.ECS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.ECS_SECRET_ACCESS_KEY }}
                  aws-region: eu-central-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ env.REPOSITORY }}
                  IMAGE_TAG: latest

              # Build a docker container and push it to ECR so that it can be deployed to ECS.
              run: |
                  docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --compress .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: definitions/prod-definition.json
                  container-name: ${{ env.CONTAINER }}
                  image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  cluster: ${{ env.CLUSTER }}
                  service: ${{ env.SERVICE }}
                  wait-for-service-stability: ${{ env.SERVICE_STABILITY }}
